{"version":3,"sources":["lib/kebab.svg","lib/helpers.js","components/CounterCreator.js","components/CounterRow.js","components/EditorRow.js","components/CounterTable.js","lib/counterManager.js","components/Counters.js","App.js","index.js"],"names":["module","exports","COLORS","CounterCreator","props","state","title","value","valueValid","step","stepValid","color","editable","e","this","setState","target","validity","valid","preventDefault","counter","parseInt","addCounter","id","className","type","placeholder","onChange","handleTitleChange","bind","min","Number","MIN_SAFE_INTEGER","max","MAX_SAFE_INTEGER","required","handleValueChange","handleStepChange","colSpan","map","onClick","handleColorChange","key","createCounter","React","Component","CounterRow","functions","decrement","increment","toggleEditable","deleteCounter","buttonClass","draggableId","index","getIndex","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","dec","inc","src","kebab","alt","edit","EditorRow","save","cancel","CounterTable","result","onDragEnd","counters","droppableId","style","width","droppableProps","defaultCounter","CounterManager","componentManager","ComponentManager","name","onReady","streamContextItem","note","isMetadataUpdate","dataString","content","text","reloadData","dataChangeHandler","platform","environment","handler","string","idCount","split","x","JSON","parse","err","console","error","filter","setInfo","includes","parseRawCountersString","push","indexOf","splice","newValue","newState","findIndex","destination","source","Object","assign","length","html","i","stringify","join","saveItemWithPresave","preview_html","buildHtmlPreview","instance","Counters","draggingRowID","get","setDataChangeHandler","updateCounters","setOnReady","getPlatform","document","documentElement","ready","initiateBridge","getCounters","update","$set","editCounter","reason","rearrange","draggingRowId","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.90dfe230.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kebab.1533b4c2.svg\";","// sample input data\n/*let COUNTERS = [\n    {title: \"Twos\", value: 2, step: 2, color: \"dark-blue\"},\n    {title: \"Threes\", value: 3, step: 3, color: \"light-blue\"},\n    {title: \"Fours\", value: 4, step: 4, color: \"green\"},\n    {title: \"Fives\", value: 5, step: 5, color: \"yellow\"},\n    {title: \"Ones\", value: 1, step: 1, color: \"red\"},\n    {title: \"Thousands\", value: 6, step: 1000, color: \"purple\"},\n];*/\n\n\nconst COLORS = [\"red\", \"dark-blue\", \"light-blue\", \"green\", \"yellow\", \"purple\"];\n\nexport {COLORS};\n","import React from \"react\";\nimport {COLORS} from \"../lib/helpers\";\n\n\nexport default class CounterCreator extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            title: \"\",\n            value: 0,\n            valueValid: true,\n            step: 1,\n            stepValid: true,\n            color: \"light-blue\",\n            editable: false\n        };\n    }\n\n    handleTitleChange(e) {\n        this.setState({title: e.target.value});\n    }\n\n    handleValueChange(e) {\n        this.setState({value: e.target.value, valueValid: e.target.validity.valid});\n    }\n\n    handleStepChange(e) {\n        this.setState({step: e.target.value, stepValid: e.target.validity.valid});\n    }\n\n    handleColorChange(e) {\n        this.setState({color: e.target.value});\n    }\n\n\n    createCounter(e) {\n        e.preventDefault();\n        if (!(this.state.valueValid && this.state.stepValid)) return;\n        let counter = {\n            title: this.state.title,\n            value: parseInt(this.state.value),\n            step: parseInt(this.state.step),\n            color: this.state.color\n        };\n        this.props.addCounter(counter);\n        this.setState({\n            title: \"\"\n        });\n    }\n\n    render() {\n        return (\n            <table id=\"counter-creator\" className={this.state.color}>\n                <tbody>\n                <tr id=\"tvs\">\n                    <td>\n                        <label>Title</label>\n                        <input\n                            type=\"text\"\n                            placeholder=\"Title\"\n                            onChange={this.handleTitleChange.bind(this)}\n                            value={this.state.title}/>\n                    </td>\n\n                    <td className=\"input-num-td\">\n                        <label>Value</label>\n                        <input\n                            type=\"number\"\n                            min={Number.MIN_SAFE_INTEGER}\n                            max={Number.MAX_SAFE_INTEGER}\n                            required={true}\n                            onChange={this.handleValueChange.bind(this)}\n                            value={this.state.value}/>\n                    </td>\n\n                    <td id=\"cc-step-input\" className=\"input-num-td\">\n                        <label>Step</label>\n                        <input\n                            type=\"number\"\n                            required={true}\n                            min={1}\n                            max={Number.MAX_SAFE_INTEGER}\n                            onChange={this.handleStepChange.bind(this)}\n                            value={this.state.step}/>\n                    </td>\n\n                </tr>\n                <tr>\n                    <td colSpan=\"3\">\n                        {COLORS.map(color => (\n                            <button className={`${color}-color-selector-button focus-color`}\n                                    value={color}\n                                    onClick={this.handleColorChange.bind(this)}\n                                    key={color}\n                            />\n                        ))}\n                    </td>\n                </tr>\n\n                <tr>\n                    <td colSpan=\"3\">\n                        <button onClick={this.createCounter.bind(this)}\n                                className={`${this.state.color}-button create-button`}>\n                            Create\n                        </button>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        )\n    }\n}\n","import React from \"react\";\nimport kebab from '../lib/kebab.svg';\nimport {Draggable} from 'react-beautiful-dnd';\n\nexport default class CounterRow extends React.Component {\n\n    dec() {\n        this.props.functions.decrement(this.props.counter);\n    }\n\n    inc() {\n        this.props.functions.increment(this.props.counter);\n    }\n\n    edit() {\n        this.props.functions.toggleEditable(this.props.counter);\n    }\n\n    deleteCounter() {\n        this.props.functions.deleteCounter(this.props.counter);\n    }\n\n\n    render() {\n        const {counter} = this.props;\n        const buttonClass = `${counter.color}-button`;\n        return (\n            <Draggable draggableId={counter.id} index={this.props.functions.getIndex(counter)}>\n                {(provided, snapshot) => (\n                    <tr ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}>\n                        <td className={`${counter.color} title-td`}> {counter.title}</td>\n                        <td className={counter.color}>\n                            <button className={buttonClass} onClick={this.dec.bind(this)}> -</button>\n                        </td>\n                        <td className={`${counter.color} value-td`}> {counter.value} </td>\n                        <td className={counter.color}>\n                            <button className={buttonClass} onClick={this.inc.bind(this)}> +</button>\n                        </td>\n\n                        <td className={`dropdown ${counter.color}`}>\n                            <img src={kebab} alt=\"\"/>\n                            <div className=\"dropdown-options-content\">\n                                <button className={`${buttonClass} edit-button`} onClick={this.edit.bind(this)}>Edit\n                                </button>\n                                <button className={`${buttonClass} delete-button`}\n                                        onClick={this.deleteCounter.bind(this)}>Delete\n                                </button>\n                            </div>\n                        </td>\n\n                    </tr>\n                )}\n            </Draggable>\n        )\n    }\n}\n","import React from \"react\";\nimport {Draggable} from 'react-beautiful-dnd';\nimport {COLORS} from \"../lib/helpers\";\n\nexport default class EditorRow extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: props.counter.title,\n            value: props.counter.value,\n            valueValid: true,\n            step: props.counter.step,\n            stepValid: true,\n            color: props.counter.color,\n            editable: false\n        };\n    }\n\n    handleTitleChange(e) {\n        this.setState({title: e.target.value});\n    }\n\n    handleValueChange(e) {\n        this.setState({value: e.target.value, valueValid: e.target.validity.valid});\n    }\n\n    handleStepChange(e) {\n        this.setState({step: e.target.value, stepValid: e.target.validity.valid});\n    }\n\n    handleColorChange(e) {\n        this.setState({color: e.target.value});\n    }\n\n    save() {\n        if (!(this.state.valueValid && this.state.stepValid)) return;\n        let counter = {\n            title: this.state.title,\n            value: parseInt(this.state.value),\n            step: parseInt(this.state.step),\n            color: this.state.color,\n            editable: false\n        };\n        this.props.functions.edit(this.props.counter, counter);\n    }\n\n    cancel() {\n        this.props.functions.toggleEditable(this.props.counter);\n    }\n\n    render() {\n        const {counter} = this.props;\n        const buttonClass = `${this.state.color}-button`;\n        return (\n            <Draggable draggableId={counter.id} index={this.props.functions.getIndex(counter)}>\n                {(provided, snapshot) => (\n                    <tr ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        className=\"edit-row\">\n\n                        <td className={`${this.state.color} editor-inputs`} colSpan=\"3\">\n                            <label>Title</label>\n                            <input\n                                type=\"text\"\n                                onChange={this.handleTitleChange.bind(this)}\n                                placeholder=\"title\"\n                                value={this.state.title}/>\n\n                            <label>Value</label>\n                            <input\n                                type=\"number\"\n                                required={true}\n                                min={Number.MIN_SAFE_INTEGER}\n                                max={Number.MAX_SAFE_INTEGER}\n                                onChange={this.handleValueChange.bind(this)}\n                                value={this.state.value}/>\n\n                            <label>Step</label>\n                            <input\n                                type=\"number\"\n                                required={true}\n                                min={1}\n                                max={Number.MAX_SAFE_INTEGER}\n                                onChange={this.handleStepChange.bind(this)}\n                                value={this.state.step}/>\n                        </td>\n                        <td className={`${this.state.color} color-editor-td`} colSpan=\"2\">\n                            <div className=\"color-editor\">\n                                {COLORS.map(color => (\n                                    <button className={`${color}-color-selector-button focus-color`}\n                                            value={color}\n                                            onClick={this.handleColorChange.bind(this)}\n                                            key={color}\n                                    />\n                                ))}\n                            </div>\n\n                            <button className={buttonClass} onClick={this.save.bind(this)}>Save</button>\n                            <button className={buttonClass} onClick={this.cancel.bind(this)}>Cancel</button>\n                        </td>\n\n                    </tr>\n\n                )}\n            </Draggable>\n        )\n    }\n}\n","import React from \"react\";\nimport CounterRow from \"./CounterRow\";\nimport EditorRow from \"./EditorRow\";\nimport {Droppable} from 'react-beautiful-dnd';\n\nexport default class CounterTable extends React.Component {\n    onDragEnd(result) {\n        this.props.functions.onDragEnd(result);\n    }\n\n    render() {\n        let {counters, functions} = this.props;\n        return (\n            <Droppable droppableId=\"table\">\n                {(provided, snapshot) => (\n                    <table style={{width: \"100%\"}} id=\"counter-table\"\n                           ref={provided.innerRef} {...provided.droppableProps}>\n                        <tbody>\n                        {counters.map(counter => (counter.editable ?\n                            <EditorRow counter={counter} functions={functions} key={counter.id}/> :\n                            <CounterRow counter={counter} functions={functions} key={counter.id}/>))}\n                        {provided.placeholder}\n                        </tbody>\n                    </table>\n                )}\n            </Droppable>\n        )\n    }\n}\n","import ComponentManager from 'sn-components-api';\nimport {COLORS} from \"./helpers\";\n\nconst CounterDelimiter = \"\\n\";\nconst defaultCounter = {title: \"\", value: 0, step: 0, color: COLORS[0]};\n\nexport default class CounterManager {\n\n    /* Singleton */\n    static instance = null;\n\n    static get() {\n        if (this.instance == null) {\n            this.instance = new CounterManager();\n        }\n        return this.instance;\n    }\n\n    initiateBridge() {\n        var permissions = [\n            {\n                name: \"stream-context-item\"\n            }\n        ]\n\n        this.componentManager = new ComponentManager(permissions, () => {\n            // on ready\n            this.onReady && this.onReady();\n        });\n\n        this.componentManager.streamContextItem((note) => {\n            this.note = note;\n\n            if (note.isMetadataUpdate) {\n                return;\n            }\n\n            this.dataString = note.content.text;\n            this.reloadData();\n            this.dataChangeHandler && this.dataChangeHandler(this.counters);\n        });\n    }\n\n    getPlatform() {\n        return this.componentManager.platform;\n    }\n\n    isMobile() {\n        return this.componentManager && this.componentManager.environment === \"mobile\";\n    }\n\n    setOnReady(onReady) {\n        this.onReady = onReady;\n    }\n\n    setDataChangeHandler(handler) {\n        this.dataChangeHandler = handler;\n    }\n\n    parseRawCountersString(string) {\n        this.idCount = 0;\n        if (!string) {\n            return []\n        }\n\n        // Remove invalid entires then add default propertites if any are missing\n        let counters = string.split(CounterDelimiter).map(x => {\n            let counter = \"\";\n            try {\n                counter = JSON.parse(x)\n            } catch (err) {\n                console.error(`Error parsing ${x}`)\n            }\n            return counter;\n        }).filter(counter => counter !== \"\").map(counter => ({...defaultCounter, ...this.setInfo(counter)}));\n        counters = counters.map(counter => {\n            if (!COLORS.includes(counter.color)) counter.color = COLORS[0];\n            return counter;\n        })\n\n        return counters;\n    }\n\n    setInfo(counter) {\n        counter.id = `${counter.title}${this.idCount++}`;\n        counter.editable = false;\n        return counter;\n    }\n\n    reloadData() {\n        this.idCount = 0;\n        this.counters = this.parseRawCountersString(this.dataString);\n    }\n\n    getCounters() {\n        if (!this.counter) {\n            this.reloadData();\n        }\n        return this.counters;\n    }\n\n    addCounter(counter) {\n        this.setInfo(counter);\n        this.counters.push(counter);\n        this.save();\n        this.reloadData();\n    }\n\n    deleteCounter(counter) {\n        const index = this.counters.indexOf(counter);\n        this.counters.splice(index, 1);\n        this.save();\n    }\n\n    //Counter Actions\n\n    increment(counter) {\n        const newValue = counter.value + counter.step;\n        if (newValue > Number.MAX_SAFE_INTEGER) return;\n\n        const index = this.counters.indexOf(counter);\n        this.counters[index].value = newValue;\n        this.save();\n    }\n\n    decrement(counter) {\n        const newValue = counter.value - counter.step;\n        if (newValue < Number.MIN_SAFE_INTEGER) return;\n\n        const index = this.counters.indexOf(counter);\n        this.counters[index].value = newValue;\n        this.save();\n    }\n\n    editCounter(counter, newState) {\n        const index = this.counters.findIndex(x => x.id === counter.id);\n        this.counters[index] = {...counter, ...newState};\n        this.save();\n    }\n\n    rearrange(destination, source) {\n        const counters = Object.assign([], this.counters);\n        const counter = this.counters[source.index];\n        counters.splice(source.index, 1);\n        counters.splice(destination.index, 0, counter);\n        this.counters = counters;\n        this.save();\n    }\n\n    buildHtmlPreview() {\n        if (this.counters.length === 0) return \"\";\n        let html = \"<div><ul>\";\n        let counterPreviewLimit = 3;\n        let i = 0;\n        while (i < counterPreviewLimit && i < this.counters.length) {\n            let counter = this.counters[i];\n            html += `<li>${counter.title}: ${counter.value}</li>`;\n            i += 1;\n        }\n        return html + \"</ul></div>\";\n    }\n\n    save() {\n        this.dataString = this.counters.map((counter) => {\n            const {title, value, step, color} = counter;\n            return JSON.stringify({title, value, step, color});\n        }).join(CounterDelimiter);\n\n        if (this.note) {\n            // Be sure to capture this object as a variable, as this.note may be reassigned in `streamContextItem`, so by the time\n            // you modify it in the presave block, it may not be the same object anymore, so the presave values will not be applied to\n            // the right object, and it will save incorrectly.\n            let note = this.note;\n            this.componentManager.saveItemWithPresave(note, () => {\n                // required to build dynamic previews\n                note.content.text = this.dataString;\n                note.content.preview_html = this.buildHtmlPreview();\n            });\n        }\n    }\n\n}\n","import React from \"react\";\nimport update from 'immutability-helper';\nimport CounterCreator from \"./CounterCreator\";\nimport CounterTable from \"./CounterTable\";\nimport CounterManager from \"../lib/counterManager\";\nimport {DragDropContext} from \"react-beautiful-dnd\";\n\nexport default class Counters extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            counters: [],\n            draggingRowID: null\n        };\n        CounterManager.get().setDataChangeHandler((counters) => {\n            // We need CounterManager.get().isMobile() to be defined, and this handler is called once on bridge ready.\n            this.updateCounters();\n        })\n\n        CounterManager.get().setOnReady(() => {\n            let platform = CounterManager.get().getPlatform();\n            // add platform class to main <html> element\n            var root = document.documentElement;\n            root.className += platform;\n            this.setState({ready: true})\n        })\n    }\n\n    componentDidMount() {\n        CounterManager.get().initiateBridge();\n        this.updateCounters();\n    }\n\n    updateCounters() {\n        this.setState({counters: CounterManager.get().getCounters()});\n    }\n\n    //Counter Management\n\n    addCounter(counter) {\n        CounterManager.get().addCounter(counter);\n        this.updateCounters();\n    }\n\n    getIndex(counter) {\n        return this.state.counters.indexOf(counter);\n    }\n\n    toggleEditable(counter) {\n        const index = this.state.counters.indexOf(counter);\n        this.setState({\n            counters: update(this.state.counters, {[index]: {editable: {$set: !counter.editable}}})\n        })\n    }\n\n    deleteCounter(counter) {\n        CounterManager.get().deleteCounter(counter);\n        this.updateCounters();\n    }\n\n    //Counter Actions\n\n    increment(counter) {\n        CounterManager.get().increment(counter);\n        this.updateCounters();\n    }\n\n    decrement(counter) {\n        CounterManager.get().decrement(counter);\n        this.updateCounters();\n    }\n\n    editCounter(counter, newState) {\n        CounterManager.get().editCounter(counter, newState);\n        this.updateCounters();\n    }\n\n    //Dragging Methods\n\n    onDragEnd(result) {\n        const {destination, source, reason} = result;\n\n        // Nothing to do\n        if (!destination || reason === 'CANCEL') {\n            this.setState({\n                draggingRowId: null,\n            });\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        CounterManager.get().rearrange(destination, source);\n        this.updateCounters();\n    }\n\n    render() {\n        const functions = {\n            increment: this.increment.bind(this),\n            decrement: this.decrement.bind(this),\n            edit: this.editCounter.bind(this),\n            onDragEnd: this.onDragEnd.bind(this),\n            getIndex: this.getIndex.bind(this),\n            toggleEditable: this.toggleEditable.bind(this),\n            deleteCounter: this.deleteCounter.bind(this)\n        };\n        return (\n            <div id=\"counters\">\n                <CounterCreator addCounter={this.addCounter.bind(this)}/>\n                <DragDropContext onDragEnd={this.onDragEnd.bind(this)}>\n                    <CounterTable\n                        counters={this.state.counters}\n                        functions={functions}\n                    />\n                </DragDropContext>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './stylesheets/App.scss';\nimport Counters from './components/Counters'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Counters/>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}